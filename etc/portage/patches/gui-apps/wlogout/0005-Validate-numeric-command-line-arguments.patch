From 2ebe0f5622884decf76c2c9e10cf61a488a2dc81 Mon Sep 17 00:00:00 2001
From: John Berg <john.berg.96bits@gmail.com>
Date: Thu, 21 Nov 2024 18:43:52 +0000
Subject: [PATCH 5/5] Validate numeric command line arguments

The numeric command line arguments are currently not validated. If a
user is passing a string by accident as an argument, or is passing an
invalid argument. This will not be detected by the application. Checking
that the arguments make sense when they are passed would informative to
a user. For example, when ``--buttons-per-row 0`` or if
``--buttons-per-row o`` is passed as an argument, wlogout will crash due
to division by 0 later during execution. This patch will add validation
to the numeric arguments.

This validation comes in 2 phases:

- We check that the argument passed by the user is a number.
  This is currently done with ``atoi()``, but this function returns 0 if
  the string is not a number. Instead, swap it for ``sscanf()`` and try to
  parse and ``%d``. This will fail if a a string which is not a number is
  passed as an argument. The new ``parse_numarg()`` function will take
  care of this.
- The parsed values are checked to ensure they are within the expected
  ranges before resuming. Mostly this means that we check that values
  are not negative as this is what the documentation suggests. And in
  the case of ``buttons_per_row``, we need a value of at least 1.

We try to provide informative feedback to the user when an argument
fails validation. To make this somewhat simpler, we also add an array of
names for spacing and margins to make writing their names over and over
less cumbersome. And whilst we're here, also update the documentation for
the ``--buttons-per-row`` option to be at least 1.

Signed-off-by: John Berg <john.berg.96bits@gmail.com>
---
 main.c | 116 ++++++++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 106 insertions(+), 10 deletions(-)

diff --git a/main.c b/main.c
index 3ab854d..6473c82 100644
--- a/main.c
+++ b/main.c
@@ -58,6 +58,15 @@ enum
     SPACING_MAX,
 };
 
+static const char *margin_names[MARGIN_MAX] = {[MARGIN_TOP] = "top margin",
+                                               [MARGIN_BOTTOM] =
+                                                   "bottom margin",
+                                               [MARGIN_LEFT] = "left margin",
+                                               [MARGIN_RIGHT] = "right margin"};
+
+static const char *space_names[MARGIN_MAX] = {
+    [SPACING_ROW] = "row spacing", [SPACING_COLUMN] = "column spacing"};
+
 #define DEFAULT_SIZE 100
 
 static char *command = NULL;
@@ -103,7 +112,7 @@ static const char *help =
     "   -l, --layout </path/to/layout>  Specify a layout file\n"
     "   -v, --version                   Show version number and stop\n"
     "   -C, --css </path/to/css>        Specify a css file\n"
-    "   -b, --buttons-per-row <0-x>     Set the number of buttons per row\n"
+    "   -b, --buttons-per-row <1-x>     Set the number of buttons per row\n"
     "   -c  --column-spacing <0-x>      Set space between buttons columns\n"
     "   -r  --row-spacing <0-x>         Set space between buttons rows\n"
     "   -m, --margin <0-x>              Set margin around buttons\n"
@@ -120,6 +129,19 @@ static const char *help =
 
 static char const *error_nomem = "Failed to allocate memory\n";
 
+static gboolean parse_numarg(const char *str, int *nump)
+{
+    /*
+     * sscanf() will successfully parse an integer from a string if there are
+     * trailing non-numeric characters. We can check that the entire string
+     * looks like a number if there is no extra trailing characters not parsed
+     * by "%d". So we expect sscanf to parse exactly 1 argument from the
+     * format.
+     */
+    char garbage;
+    return sscanf(str, "%d%c", nump, &garbage) == 1;
+}
+
 static gboolean process_args(int argc, char *argv[])
 {
 
@@ -135,27 +157,63 @@ static gboolean process_args(int argc, char *argv[])
         switch (c)
         {
         case 'm':
-            int m = atoi(optarg);
+            int m;
+            if (!parse_numarg(optarg, &m))
+            {
+                g_print("margin %s is not a number\n", optarg);
+                return TRUE;
+            }
+
             for (int i = 0; i < MARGIN_MAX; i++)
                 margin[i] = m;
             break;
         case 'L':
-            margin[MARGIN_LEFT] = atoi(optarg);
+            if (!parse_numarg(optarg, &margin[MARGIN_LEFT]))
+            {
+                g_print("%s %s is not a number\n", margin_names[MARGIN_LEFT],
+                        optarg);
+                return TRUE;
+            }
             break;
         case 'T':
-            margin[MARGIN_TOP] = atoi(optarg);
+            if (!parse_numarg(optarg, &margin[MARGIN_TOP]))
+            {
+                g_print("%s %s is not a number\n", margin_names[MARGIN_TOP],
+                        optarg);
+                return TRUE;
+            }
             break;
         case 'B':
-            margin[MARGIN_BOTTOM] = atoi(optarg);
+            if (!parse_numarg(optarg, &margin[MARGIN_BOTTOM]))
+            {
+                g_print("%s %s is not a number\n", margin_names[MARGIN_BOTTOM],
+                        optarg);
+                return TRUE;
+            }
             break;
         case 'R':
-            margin[MARGIN_RIGHT] = atoi(optarg);
+            if (!parse_numarg(optarg, &margin[MARGIN_RIGHT]))
+            {
+                g_print("%s %s is not a number\n", margin_names[MARGIN_RIGHT],
+                        optarg);
+                return TRUE;
+            }
             break;
         case 'c':
-            space[SPACING_COLUMN] = atoi(optarg);
+            if (!parse_numarg(optarg, &space[SPACING_COLUMN]))
+            {
+                g_print("%s %s is not a number\n", space_names[SPACING_COLUMN],
+                        optarg);
+                return TRUE;
+            }
             break;
         case 'r':
-            space[SPACING_ROW] = atoi(optarg);
+            if (!parse_numarg(optarg, &space[SPACING_ROW]))
+            {
+                g_print("%s %s is not a number\n", space_names[SPACING_ROW],
+                        optarg);
+                return TRUE;
+            }
             break;
         case 'l':
             layout_path = g_strdup(optarg);
@@ -167,7 +225,11 @@ static gboolean process_args(int argc, char *argv[])
             css_path = g_strdup(optarg);
             break;
         case 'b':
-            buttons_per_row = atoi(optarg);
+            if (!parse_numarg(optarg, &buttons_per_row))
+            {
+                g_print("buttons per row %s is not a number\n", optarg);
+                return TRUE;
+            }
             break;
         case 'p':
             if (strcmp("layer-shell", optarg) == 0)
@@ -188,7 +250,11 @@ static gboolean process_args(int argc, char *argv[])
             show_bind = TRUE;
             break;
         case 'P':
-            primary_monitor = atoi(optarg);
+            if (!parse_numarg(optarg, &primary_monitor))
+            {
+                g_print("pparimary monitor %s is not a number\n", optarg);
+                return TRUE;
+            }
             break;
         case 'n':
             no_span = TRUE;
@@ -200,6 +266,36 @@ static gboolean process_args(int argc, char *argv[])
             return TRUE;
         }
     }
+
+    /*
+     * Before resuming, validate that the arguments make sense. Otherwise we
+     * will encounter failures during the run.
+     */
+
+    if (buttons_per_row < 1)
+    {
+        g_print("The number of buttons per row cannot be less than 1\n");
+        return TRUE;
+    }
+
+    for (int i = 0; i < MARGIN_MAX; i++)
+    {
+        if (margin[i] < 0)
+        {
+            g_print("%s cannot be a negative number\n", margin_names[i]);
+            return TRUE;
+        }
+    }
+
+    for (int i = 0; i < SPACING_MAX; i++)
+    {
+        if (space[i] < 0)
+        {
+            g_print("%s cannot be a negative number\n", space_names[i]);
+            return TRUE;
+        }
+    }
+
     return FALSE;
 }
 
-- 
2.49.0

